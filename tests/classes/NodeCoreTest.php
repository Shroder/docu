<?php
require_once dirname(__FILE__) . '/../../classes/class.NodeCore.php';

/**
 * Test class for NodeCore.
 * Generated by PHPUnit on 2011-10-07 at 18:14:20.
 */
class NodeCoreTest extends Generic_DatabaseTestCase {

    /**
     * @var NodeCore
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->object = new NodeCore;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    protected function getSetUpOperation() {
      return new PHPUnit_Extensions_Database_Operation_Composite(array(
            new TruncateDatabaseOperation(),
            PHPUnit_Extensions_Database_Operation_Factory::INSERT()
        ));
    }

    public function getDataSet()
    {
        return $this->createFlatXMLDataSet(dirname(__FILE__).'/_files/test_constraints.xml');
    }

    /**
     * null is not allowed as a parameter
     * @expectedException Exception
     */
    public function testNullTypeInConstruct() {
        $stub = $this->getMockForAbstractClass("NodeCore", array(null));
    }

    public function test__construct() {
        //$stub = $this->getMockForAbstractClass("NodeCore", array(null));
        $stub = $this->getMockForAbstractClass("NodeCore", array('properties', 1, 'eq:price:1700', 'select:title>>something'));
        $this->assertEquals('properties', $stub->getType());
        $this->assertInstanceOf('NodeCore', $stub->Me());
        $this->assertObjectHasAttribute('_cache', $stub);
        $this->assertObjectHasAttribute('_callChain', $stub);


        //_attributes
        
    }
    
    /**
     * @todo Implement test__get().
     */
    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__call().
     */
    public function test__call() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__set().
     */
    public function test__set() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__isset().
     */
    public function test__isset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @expectedException Exception
     */
    public function test__unset() {
        $stub = $this->getMockForAbstractClass("NodeCore");
        unset($stub->foo);
    }

    /**
     * @todo Implement testCommit().
     */
    public function testCommit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetType().
     */
    public function testGetType() {
        $stub = $this->getMockForAbstractClass("NodeCore", array('properties', 1, 'eq:price:1700', 'select:title>>something'));
        $this->assertEquals('properties', $stub->getType());
    }

    /**
     * @todo Implement testMe().
     */
    public function testMe() {
        $stub = $this->getMockForAbstractClass("NodeCore", array('properties', 1, 'eq:price:1700', 'select:title>>something'));
        $this->assertInstanceOf('NodeCore', $stub->Me());
    }

    /**
     * @todo Implement testJump().
     */
    public function testJump() {
        $stub = $this->getMockForAbstractClass("NodeCore", array('properties', 1, 'eq:price:1700', 'select:title>>something'));
        $this->assertInstanceOf('Cluster', $stub->jump('test'));
    }
    
    /**
     * @todo Jump with non-existent node
     */
    public function testJump2() {
        $stub = $this->getMockForAbstractClass("NodeCore", array("properties"));
        $this->assertInstanceOf('Cluster', $stub->jump('test'));
        $this->assertEmpty($stub->pk);
    }

    public function testCanFetchCondensedChain() {
        $stub = $this->getMockForAbstractClass("NodeCore", array("properties"));
        $chain = DebugUtils::getChain($stub);
        $this->assertNotEmpty($chain);
        $this->assertArrayHasKey('properties', $chain);
    }

public function testCanFetchCondensedChain2() {
        $stub = $this->getMockForAbstractClass("NodeCore", array("properties"));
        $chain = DebugUtils::getChain($stub);
        $this->assertNotEmpty($chain);
        $this->assertArrayHasKey('properties', $chain);
    }

}

?>
