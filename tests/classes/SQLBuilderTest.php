<?php

require_once dirname(__FILE__) . '/../../classes/class.SQLBuilder.php';

/**
 * Test class for SQLBuilder.
 * Generated by PHPUnit on 2011-11-29 at 20:05:11.
 */
class SQLBuilderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var SQLBuilder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->object = new SQLBuilder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testGetTableName().
     */
    public function testGetTableName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /*
     * Using getSQL(), queries should follow the format
     * 1.) statement1 (no line break)
     * 2.) statement1\n
     *     statement2
     */
    public function testCanRetrieveStackedSQL() {
        $sqlBuilder = new SQLBuilder();
        $sqlBuilder->addSQL("statement1");
        $this->assertEquals("statement1", $sqlBuilder->getSQL());

        $sqlBuilder->addSQL("statement2");
        $this->assertEquals("statement1\nstatement2", $sqlBuilder->getSQL());
    }

    /**
     * @todo Implement testSelect().
     */
    public function testGenerateSelectStatement1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo"));
        $callChain->push("tags");
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $sqlBuilder->select();
        $this->assertEquals("SELECT DISTINCT `tags`.*, `properties`.`foo`", $sqlBuilder->GetSQL());
    }

    public function testCanGenerateSelectStatement2() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar"));
        $callChain->push("tags");
        $callChain->orderByOwnership();

        //print_r($callChain->_calls[0]->_buildWhereArray());

        $sqlBuilder = new SQLBuilder($callChain);
        $sqlBuilder->select();
        $this->assertEquals("SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`", $sqlBuilder->getSQL());
    }

    public function testCanGenerateFromStatement1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar"));
        $callChain->push("tags");
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $sqlBuilder->from();
        $this->assertEquals("FROM `tags`", $sqlBuilder->getSQL());
    }

    /**
     */
    public function testCanGenerateJoinStatement1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar"));
        $callChain->push("tags");
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder();
        $sqlBuilder->join($callChain);

        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->GetSQL());
    }

    /**
     * Test where generation
     */
    public function testCanGenerateWhereStatement1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123"));
        $callChain->push("tags", array("eq:foo:bar"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder();
        $sqlBuilder->where($callChain);

        $this->assertEquals("WHERE `tags`.`foo` = 'bar'\nAND `properties`.`foo` = 123", $sqlBuilder->getSQL());
    }

    public function testCanGenerateWhereStatement2() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder();
        $sqlBuilder->where($callChain);

        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanGenerateOrderStatement() {
        $this->markTestIncomplete();
    }

    public function testCanBuildCompleteSQL1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar"));
        $callChain->push("tags");
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());

    }

    public function testCanBuildCompleteSQL2() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();
        
        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanBuildCompleteOrderedSQL1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz", "order:title:ASC"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $expectedSQL[] = "ORDER BY `tags`.`title` ASC";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanBuildCompleteOrderedSQL2() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567", "order:price:ASC"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz", "order:title:ASC"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $expectedSQL[] = "ORDER BY `tags`.`title` ASC, `properties`.`price` ASC";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanBuildCompleteLimitSimpleSQL1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("start:5", "top:10"));

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `properties`.*";
        $expectedSQL[] = "FROM `properties`";
        $expectedSQL[] = "LIMIT 5, 10";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanBuildCompleteLimitSQL1() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz", "top:1"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $expectedSQL[] = "LIMIT 1";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }

    public function testCanBuildCompleteLimitSQL2() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz", "top:10", "start:5"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "AND (`properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $expectedSQL[] = "LIMIT 5, 10";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }
    
    public function testCanBuildCompleteLimitSQL3() {
        $callChain = new CallChain();
        $callChain->push("properties", array("select:foo>>bar", "eq:foo:123", "or:eq:foo:567", "top:10", "start:5"));
        $callChain->push("tags", array("eq:foo:bar", "and:eq:foo2:baz", "top:10", "start:5"));
        $callChain->orderByOwnership();

        $sqlBuilder = new SQLBuilder($callChain);
        $generatedSQL = $sqlBuilder->buildSQL();

        $expectedSQL[] = "SELECT DISTINCT `tags`.*, `properties`.`foo` as `bar`";
        $expectedSQL[] = "FROM `tags`";
        $expectedSQL[] = "LEFT JOIN `properties#tags`";
        $expectedSQL[] = "LEFT JOIN (";
        $expectedSQL[] = "    SELECT DISTINCT `properties`.`foo` as `bar`";
        $expectedSQL[] = "    FROM `properties`";
        $expectedSQL[] = "    WHERE `properties`.`foo` = 123 OR `properties`.`foo` = 567)";
        $expectedSQL[] = "    LIMIT 5, 10";
        $expectedSQL[] = ") as `properties`";
        $expectedSQL[] = "ON `properties#tags`.`pk1` = `properties`.`pk`";
        $expectedSQL[] = "ON `properties#tags`.`pk2` = `tags`.`pk`";
        $expectedSQL[] = "WHERE (`tags`.`foo` = 'bar' AND `tags`.`foo2` = 'baz')";
        $expectedSQL[] = "LIMIT 5, 10";
        $this->assertEquals(implode("\n", $expectedSQL), $sqlBuilder->getSQL());
    }
}