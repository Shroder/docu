<?php

require_once dirname(__FILE__) . '/../../classes/class.Expression.php';

/**
 * Test class for Expression.
 * Generated by PHPUnit on 2011-10-08 at 09:01:41.
 */
class ExpressionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Expression
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        //$this->object = new Expression;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    /*
     * Todo: Bad parameters for construct are being raised by PHP, 
     * and not handled by code. This should be changed and a test should
     * be created to detect this.
     */
    /**
     * @expectedException Exception
     */
    public function testConstructWithEmptyParameter1() {
        $exp = New Expression();
    }
    
    /**
     * @expectedException Exception
     */
    public function testConstructWithEmptyParameter2() {
        $exp = New Expression(null);
    }

    
    /**
     * @expectedException Exception
     */
    public function testConstructWithEmptyParameter3() {
        $exp = New Expression(true);
    }

    public function testConstructorInputVariations() {
        $exp = New Expression("pk");
        $this->assertEquals($exp->getExpression(), "%s");
    }
    
    public function testParseCalledOnConstruct() {
        echo "parseCall\n";
        //$exp = $this->getMock('Expression', array('parse'), array('pk'));
        $stub = $this->getMockBuilder('Expression')
                ->disableOriginalConstructor()
                ->getMock();

        $parse_result = array(
            "%s",
            array("foo")
        );

        $stub->expects($this->once())
                ->method('parse')
                ->will($this->returnValue($parse_result));

        // Do we need to confirm Column class is being called at least once?
        $stub->__construct('foo');

    }

    /**
     * @todo Implement testParse().
     */
    public function testParse() {
        // Assert count
        $result = Expression::Parse("pk");
        $this->assertEquals(count($result), 2, 'Expected an array of two elements');

        // Test out input variations
        $result = Expression::Parse("pk");        
        $this->assertEquals($result[0], '%s', 'Expected expression to be %s');
        $this->assertEquals($result[1], array('pk'), 'Expected columns to be pk');
        
        $result = Expression::Parse("foo1");
        $this->assertEquals($result[0], '%s', 'Expected expression to be %s');
        $this->assertEquals($result[1], array('foo1'), 'Expected columns to be foo1');

        $result = Expression::Parse("foo_bar");
        $this->assertEquals($result[0], '%s', 'Expected expression to be %');
        $this->assertEquals($result[1], array('foo_bar'));

        // May be an irrelevant test
        $result = Expression::Parse("foo.bar");
        $this->assertEquals($result[0], '%s');
        $this->assertEquals($result[1], array('foo.bar'));
    }

    /**
     * @todo Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testToString().
     */
    public function testToString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testTranspose().
     */
    public function testTranspose() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetExpression().
     */
    public function testGetExpression() {
        $exp = New Expression("pk");
        $this->assertEquals($exp->getExpression(), "%s");        
    }

    /**
     * Single column
     */
    public function testGetColumns() {
        $exp = New Expression("pk");
        $columns = $exp->getColumns();
        $this->assertInternalType('array', $columns, 'Expected columns to be array');
        $this->assertEquals(1, sizeof($columns));
        $this->assertInstanceOf('Column', $columns[0], 'Expected class of Column');

    }
    /**
     * Single column
     */
    public function testGetColumns2() {
        $exp = New Expression("pk, foo, bar");
        $columns = $exp->getColumns();
        $this->assertInternalType('array', $columns, 'Expected columns to be array');
        $this->assertEquals(3, sizeof($columns));
        $this->assertInstanceOf('Column', $columns[0], 'Expected class of Column');

    }


    /**
     * @todo Implement testGetAlias().
     */
    public function testGetAlias() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
